CREATE TYPE instance_status AS ENUM ('live', 'dead');

CREATE TABLE IF NOT EXISTS instances (
	id varchar(64) PRIMARY KEY,
	last_at timestamptz NOT NULL DEFAULT NOW(),
	status instance_status NOT NULL DEFAULT 'live'
);

CREATE TABLE IF NOT EXISTS jobs (
	id bigint PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
	created_at timestamptz NOT NULL DEFAULT NOW(),
	protocol varchar(16) NOT NULL,
	url varchar(1024) NOT NULL,
	meta jsonb NULL,
	headers jsonb NULL,
	body BYTEA NULL
);

CREATE TABLE IF NOT EXISTS scheduled (
	id bigint NOT NULL,
	at timestamptz NOT NULL,
	retry int NOT NULL DEFAULT 0,
	
	CONSTRAINT pk_scheduled PRIMARY KEY (id),
	CONSTRAINT fk_jobs_id FOREIGN KEY (id)
        REFERENCES jobs (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS enqueued (
	id bigint NOT NULL,
	retry int NOT NULL DEFAULT 0,
	instance_id varchar(64) NULL,
	lock_at timestamptz NULL,

	CONSTRAINT pk_enqueued PRIMARY KEY (id),
	CONSTRAINT fk_jobs_id FOREIGN KEY (id)
        REFERENCES jobs (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS assigned (
	id bigint NOT NULL,
	retry int NOT NULL DEFAULT 0,
	instance_id varchar(64) NOT NULL,
	at timestamptz NOT NULL DEFAULT NOW(),

	CONSTRAINT pk_assigned PRIMARY KEY (id),
	CONSTRAINT fk_jobs_id FOREIGN KEY (id)
        REFERENCES jobs (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE CASCADE
);

CREATE TYPE job_status AS ENUM ('scheduled', 'enqueued', 'assigned', 'retried', 'succeeded', 'failed', 'cancelled');

CREATE TABLE IF NOT EXISTS history (
	id bigint NOT NULL,
	retry int NOT NULL DEFAULT 0,
	status job_status NOT NULL,
	instance_id varchar(64) NOT NULL,
	at timestamptz NOT NULL DEFAULT NOW(),
	completed bool GENERATED ALWAYS AS (status IN ('succeeded', 'failed', 'cancelled')) STORED,

	CONSTRAINT fk_jobs_id FOREIGN KEY (id)
        REFERENCES jobs (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE CASCADE
);

CREATE INDEX IF NOT EXISTS ix_enqueued_retry_id
    ON enqueued USING btree (retry ASC NULLS LAST, id ASC NULLS LAST)
    WHERE lock_at IS NULL;